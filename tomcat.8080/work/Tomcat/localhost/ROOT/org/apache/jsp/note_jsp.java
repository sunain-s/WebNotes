/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-20 17:43:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import uk.ac.ucl.model.Note;
import uk.ac.ucl.model.CategoryManager;

public final class note_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(7);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("uk.ac.ucl.model.Note");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("uk.ac.ucl.model.CategoryManager");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");

    Note note = (Note) request.getAttribute("note");
    if (note != null) {

      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <title>");
      out.print( note.getTitle() );
      out.write("</title>\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("    <h1>Note: ");
      out.print( note.getTitle() );
      out.write("</h1>\r\n");
      out.write("    <strong>Created At:</strong>\r\n");
      out.write("    ");

        String createdAt = note.getCreatedAt();
        SimpleDateFormat sdf = new SimpleDateFormat("MMM dd, yyyy HH:mm");
        try {
            Date date = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(createdAt);
            out.print(sdf.format(date));
        } catch (Exception e) {
            out.print(createdAt); // In case parsing fails, fallback to raw string
        }
    
      out.write(" <br>\r\n");
      out.write("    <strong>Edited At:</strong>\r\n");
      out.write("    ");

        String editedAt = note.getEditedAt();
        try {
            Date date = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(editedAt);
            out.print(sdf.format(date));
        } catch (Exception e) {
            out.print(editedAt); // In case parsing fails, fallback to raw string
        }
    
      out.write(" <br>\r\n");
      out.write("        <p><strong>Content:</strong> ");
      out.print( note.getText() );
      out.write("</p>\r\n");
      out.write("\r\n");
      out.write("        ");
 if (note.getUrl() != null && !note.getUrl().isEmpty()) { 
      out.write("\r\n");
      out.write("            <p><strong>URL:</strong> <a href=\"");
      out.print( note.getUrl() );
      out.write('"');
      out.write('>');
      out.print( note.getUrl() );
      out.write("</a></p>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("        ");
 if (note.getImgUrl() != null && !note.getImgUrl().isEmpty()) { 
      out.write("\r\n");
      out.write("            <p><strong>Image:</strong></p>\r\n");
      out.write("            <img src=\"");
      out.print( note.getImgUrl() );
      out.write("\" alt=\"Note Image\" width=\"200\">\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <h2>Edit Note</h2>\r\n");
      out.write("    <form action=\"note\" method=\"post\">\r\n");
      out.write("        <input type=\"hidden\" name=\"action\" value=\"edit\">\r\n");
      out.write("        <input type=\"hidden\" name=\"oldTitle\" value=\"");
      out.print( note.getTitle() );
      out.write("\">\r\n");
      out.write("        <label>Title: <input type=\"text\" name=\"newTitle\" value=\"");
      out.print( note.getTitle() );
      out.write("\" required></label>\r\n");
      out.write("        <label>Content: <textarea name=\"newText\">");
      out.print( note.getText() );
      out.write("</textarea></label>\r\n");
      out.write("        <label>URL: <input type=\"text\" name=\"newUrl\" value=\"");
      out.print( note.getUrl() );
      out.write("\"></label>\r\n");
      out.write("        <label>Image URL: <input type=\"text\" name=\"newImgUrl\" value=\"");
      out.print( note.getImgUrl() );
      out.write("\"></label>\r\n");
      out.write("\r\n");
      out.write("        <h3>Select Categories:</h3>\r\n");
      out.write("        ");

            List<String> allCategories = CategoryManager.getInstance().getCategories();
            for (String category : allCategories) {
                boolean isChecked = note.getCategories().contains(category);
        
      out.write("\r\n");
      out.write("        <label><input type=\"checkbox\" name=\"categories\" value=\"");
      out.print( category );
      out.write('"');
      out.write(' ');
      out.print( isChecked ? "checked" : "" );
      out.write("></label> ");
      out.print( category );
      out.write(" <br>\r\n");
      out.write("        ");

            }
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <button type=\"submit\">Save Changes</button>\r\n");
      out.write("    </form>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <h2>Delete Note</h2>\r\n");
      out.write("        <form action=\"note\" method=\"post\">\r\n");
      out.write("            <input type=\"hidden\" name=\"action\" value=\"delete\">\r\n");
      out.write("            <input type=\"hidden\" name=\"title\" value=\"");
      out.print( note.getTitle() );
      out.write("\">\r\n");
      out.write("            <button type=\"submit\">Delete</button>\r\n");
      out.write("        </form>\r\n");
      out.write("    ");
} else { 
      out.write("\r\n");
      out.write("        <p>Note not found.</p>\r\n");
      out.write("    ");
 }
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <br>\r\n");
      out.write("    <a href=\"index\">Back to Notes</a>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
